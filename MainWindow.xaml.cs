using System;
using System.Xml;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace LoremIpsum_WPFApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // Declare xml document
        XmlDocument sourceDoc = new XmlDocument();
        // Instantiate random number generator
        static Random rand = new Random();
        List<List<string>> lengthCategories = new List<List<string>>();
        List<string> shortWords;
        List<string> normalWords;
        List<string> longWords;


        public MainWindow()
        {
            InitializeComponent();
            // Initialize xml source document
            sourceDoc.Load(@"C:\Users\juhas\source\repos\LoremIpsum_WPFApp\LipsumSource.xml");

            shortWords = ListChildsOfXMLNode("shorties");
            normalWords = ListChildsOfXMLNode("normies");
            longWords = ListChildsOfXMLNode("longies");

            lengthCategories.Add(shortWords);
            lengthCategories.Add(shortWords);
            lengthCategories.Add(shortWords);
            lengthCategories.Add(normalWords);
            lengthCategories.Add(normalWords);
            lengthCategories.Add(normalWords);
            lengthCategories.Add(longWords);
        }


        // Test string for non digit characters
        private bool CheckValueProvided(string textToCheck)
        {
            bool checkResult = true;
            if (textToCheck != string.Empty)
            {
                foreach (char item in textToCheck)
                {
                    if (char.IsDigit(item))
                    {
                        continue;
                    }
                    else
                    {
                        checkResult = false;
                        break;
                    }
                }
            }
            else
            {
                checkResult = false;
            }
            return checkResult;
        }

        // Display child elements of "categoryName" 
        public void DisplayCategoryElements(string categoryName)
        {
            XmlNode root = sourceDoc.DocumentElement;
            XmlNodeList groupElements = root.SelectSingleNode($"descendant::{categoryName}").ChildNodes;

            for (int i = 0; i < groupElements.Count; i++)
            {
                Console.WriteLine(groupElements[i].InnerXml);
            }
        }

        // Returns child elements of XMLNode "categoryName" as an array of strings
        public List<string> ListChildsOfXMLNode(string categoryName)
        {
            XmlNode root = sourceDoc.DocumentElement;
            XmlNode elementGroup = root.SelectSingleNode(categoryName);
            List<string> elementArray = new List<string>();

            foreach (XmlNode node in elementGroup.ChildNodes)
            {
                elementArray.Add(node.InnerText);
            }
            return elementArray;
        }

        // Returns a random integer between "minNumber" and "maxNumber"
        public int RandomIntegerGenerator(int minNumber, int maxNumber)
        {
            int newRand = rand.Next(minNumber, maxNumber);
            return newRand;
        }

        // Returns a random integer between "minNumber" and "maxNumber" different than that of the last integer generated by this function
        public int NonRepeaterRIG(int minNumber, int maxNumber)
        {
            int newRand;
            int currentRandomNumber = 0;
            int lastRandomNumber = 0;

            // Set returnable value only if it differs from the last generated random number or 0
            while (currentRandomNumber == lastRandomNumber)
            {
                currentRandomNumber = rand.Next(minNumber, maxNumber);

                if (currentRandomNumber != lastRandomNumber)
                {
                    break;
                } else
                {
                    lastRandomNumber = currentRandomNumber;
                    continue;
                }
            }
            newRand = rand.Next(minNumber, maxNumber);
            return newRand;
        }


        public string GenerateText(int numberOfSentences)
        {
            string tempString = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ";

            for (int i = 0; i < numberOfSentences; i++)
            {
                if (i > 0 && i % 8 == 0)
                {
                    tempString += "\n\n";
                }
                tempString += GenerateSentence(RandomIntegerGenerator(5, 16));
            }
            return tempString;
        }

        public string GenerateSentence(int numberOfWords)
        {
            string tempString = string.Empty;
            int numberOfCategories = lengthCategories.Count;
            List<string> tempList;
            string tempWord;

            for (int i = 0; i < numberOfWords; i++)
            {
                tempList = lengthCategories[RandomIntegerGenerator(0, numberOfCategories)];
                tempWord = tempList[RandomIntegerGenerator(0, tempList.Count)];
                if (i == 0) 
                {
                    tempWord = char.ToUpper(tempWord[0]) + tempWord.Substring(1);
                    tempString += tempWord;
                } else
                {
                    tempString += " " + tempWord;
                }
            }
            tempString += ". ";
            return tempString;
        }


        private void btnCopyText_Click(object sender, RoutedEventArgs e)
        {
            txtScreen.Text += LineFeedRemover.CleanClipboardText();
        }

        private void btnLipsum_Click(object sender, RoutedEventArgs e)
        {
            if (CheckValueProvided(txtLength.Text) == true)
            {
                txtScreen.Text = GenerateText(Convert.ToInt32(txtLength.Text));
            }
            else
            {
                txtScreen.Text = "Invalid value for length!\nValue may contain only digits.";
            }
        }



        private void Window_Activated(object sender, EventArgs e)
        {
            Topmost = true;
        }

        private void Window_Deactivated(object sender, EventArgs e)
        {
            if (Owner == null || Owner.IsActive)
                return;
            bool hasActiveWindow = false;
            foreach (Window ownedWindow in Owner.OwnedWindows)
            {
                if (ownedWindow.IsActive)
                    hasActiveWindow = true;
            }

            if (!hasActiveWindow)
                Topmost = false;
        }
    }
}
